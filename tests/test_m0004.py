import pytest
import datetime

from rga_whisperer.message_types import *


def test_datastream_simple_parse():
    data = \
        b"\x00\x00\x02\x44" \
        b"\x00\x00\x00\x1e" \
        b"\x06\xdd\xb9\x58" \
        b"\x00\x04\x01\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01" \
        b"\x06\xbe\x89\x70\x00\x00\x00\x00\x20\x04\x00\x04\x00\x01\xc6\x30" \
        b"\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x30\xb7\x0b\xe8" \
        b"\x30\x37\x0b\xe8\x31\x18\x89\xed\x30\xb7\x0b\xe8\x30\x98\x89\xec" \
        b"\x30\xb7\x0b\xe8\x30\xe4\xce\xe1\x30\xd5\x8d\xe3\x30\x74\x0f\xe0" \
        b"\x30\x37\x0b\xe9\x30\xc6\x4c\xe6\x30\x98\x89\xec\x30\xb7\x0b\xe8" \
        b"\x30\xb7\x0b\xe8\x30\x74\x0f\xe1\x30\xd5\x8d\xe4\x30\x18\x89\xec" \
        b"\x30\xa7\xca\xea\x30\x98\x89\xec\x30\x98\x89\xec\x30\xa7\xca\xea" \
        b"\x30\xc6\x4c\xe6\x30\x98\x89\xec\x30\x98\x89\xeb\x30\xe4\xce\xe2" \
        b"\x30\xd5\x8d\xe4\x30\x98\x89\xeb\x30\x89\x48\xed\x30\xc6\x4c\xe6" \
        b"\x30\x37\x0b\xe8\x30\x89\x48\xee\x30\x89\x48\xee\x30\x55\x8d\xe3" \
        b"\x30\x98\x89\xed\x2f\xf4\x0f\xe0\x30\x98\x89\xec\xae\xf4\x0f\xdc" \
        b"\x31\x2f\x6b\x6a\x30\x18\x89\xeb\x30\x18\x89\xec\x31\x01\xa8\x6f" \
        b"\x30\x98\x89\xec\x30\xb7\x0b\xe8\x30\x37\x0b\xe7\x30\x89\x48\xee" \
        b"\x30\x98\x89\xec\x30\x74\x0f\xe0\x30\x55\x8d\xe3\x30\x74\x0f\xe1" \
        b"\x30\x98\x89\xec\x30\xe4\xce\xe3\x30\xf4\x0f\xe1\x31\x09\x48\xee" \
        b"\x30\x98\x89\xec\x30\x37\x0b\xe8\x30\xe4\xce\xe2\x30\x98\x89\xec" \
        b"\x30\xb7\x0b\xe8\x31\x09\x48\xef\x30\xc6\x4c\xe6\x30\xb7\x0b\xe8" \
        b"\x30\x89\x48\xee\x30\x98\x89\xec\x30\x55\x8d\xe4\x30\x74\x0f\xdf" \
        b"\x30\xb7\x0b\xe8\x30\x74\x0f\xdf\x30\xc6\x4c\xe6\x30\xc6\x4c\xe6" \
        b"\x30\xf4\x0f\xe0\x30\x74\x0f\xdf\x30\x37\x0b\xe8\x30\x89\x48\xee" \
        b"\x30\x89\x48\xee\x30\x55\x8d\xe3\x30\x18\x89\xec\x2f\x74\x0f\xdf" \
        b"\x30\xa7\xca\xea\x30\xe4\xce\xe2\x30\xa7\xca\xea\x30\xc6\x4c\xe6" \
        b"\x30\xd5\x8d\xe4\x30\x18\x89\xeb\x30\xe4\xce\xe2\x30\xb7\x0b\xe8" \
        b"\x30\xd5\x8d\xe4\x30\x89\x48\xee\x30\xa7\xca\xea\x30\x89\x48\xee" \
        b"\x30\xf4\x0f\xe1\x30\xe4\xce\xe3\x30\xd5\x8d\xe5\x30\xc6\x4c\xe5" \
        b"\x30\x18\x89\xeb\x30\xa7\xca\xea\x30\xc6\x4c\xe5\x30\x89\x48\xee" \
        b"\x30\xb7\x0b\xe8\x30\x74\x0f\xdf\x30\x74\x0f\xdf\x2f\xf4\x0f\xdf" \
        b"\x30\xd5\x8d\xe4\x30\xe4\xce\xe2\x30\xa7\xca\xe9\x30\x98\x89\xec" \
        b"\x31\x01\xa8\x6f\x30\x74\x0f\xe0\x30\xb7\x0b\xe8\x30\x98\x89\xec" \
        b"\x30\x89\x48\xef\x30\xe4\xce\xe1\x30\x98\x89\xec\x30\x98\x89\xec" \
        b"\x30\x37\x0b\xe8\x30\x37\x0b\xe8\x30\x89\x48\xee\x30\xb7\x0b\xe8" \
        b"\x30\xe4\xce\xe3\x30\x98\x89\xec\x31\x10\xe9\x6e\x30\xc6\x4c\xe6" \
        b"\x30\xa7\xca\xea\x30\xb7\x0b\xe7\x30\xc6\x4c\xe6\x30\x98\x89\xec" \
        b"\x30\xb7\x0b\xe8\x30\x37\x0b\xe7\x00\xc0\xff\xff\x00\x2d\x4b\x43" \
        b"\x79\x2b\x66\x98"

    msg = parse_message(data)

    assert msg.header.id == 0x1e
    assert msg.header.object_ref == 0x06_dd_b9_58
    assert isinstance(msg, DataStream1Message)
    assert len(msg.elements) == 1
    element = msg.elements[0]
    assert element.item_handle == 113150320
    assert isinstance(element.value, list)
    assert len(element.value) == 128
    assert element.value[0] == 0.0
    assert element.quality == 192
    assert element.timestamp == datetime.datetime(
        2005, 1, 2, 8, 11, 59, 758999)


def test_datastream_multiple_parse():

    data = \
        b"\x00\x00\x03\x80" \
        b"\x00\x00\x00\x1d" \
        b"\x06\xdd\xb9\x58" \
        b"\x00\x04\x01\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03" \
        b"\x06\xbe\x89\x70\x00\x00\x00\x00\x20\x04\x00\x04\x00\x01\x00\x00" \
        b"\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x98\x89\xea" \
        b"\x30\xe4\xce\xe2\x30\xa7\xca\xea\x30\xb7\x0b\xe8\x30\x98\x89\xec" \
        b"\x30\xb7\x0b\xe8\x30\xe4\xce\xe1\x30\xd5\x8d\xe3\x30\x74\x0f\xe0" \
        b"\x30\x37\x0b\xe9\x30\xc6\x4c\xe6\x30\x98\x89\xec\x30\xb7\x0b\xe8" \
        b"\x30\xb7\x0b\xe8\x30\x74\x0f\xe1\x30\xd5\x8d\xe4\x30\x18\x89\xec" \
        b"\x30\xa7\xca\xea\x30\x98\x89\xec\x30\x98\x89\xec\x30\xa7\xca\xea" \
        b"\x30\xc6\x4c\xe6\x30\x98\x89\xec\x30\x98\x89\xeb\x30\xe4\xce\xe2" \
        b"\x30\xd5\x8d\xe4\x30\x98\x89\xeb\x30\x89\x48\xed\x30\xc6\x4c\xe6" \
        b"\x30\x37\x0b\xe8\x30\x89\x48\xee\x30\x89\x48\xee\x30\x55\x8d\xe3" \
        b"\x30\x98\x89\xed\x2f\xf4\x0f\xe0\x30\x98\x89\xec\xae\xf4\x0f\xdc" \
        b"\x31\x2f\x6b\x6a\x30\x18\x89\xeb\x30\x18\x89\xec\x31\x01\xa8\x6f" \
        b"\x30\x98\x89\xec\x30\xb7\x0b\xe8\x30\x37\x0b\xe7\x30\x89\x48\xee" \
        b"\x30\x98\x89\xec\x30\x74\x0f\xe0\x30\x55\x8d\xe3\x30\x74\x0f\xe1" \
        b"\x30\x98\x89\xec\x30\xe4\xce\xe3\x30\xf4\x0f\xe1\x31\x09\x48\xee" \
        b"\x30\x98\x89\xec\x30\x37\x0b\xe8\x30\xe4\xce\xe2\x30\x98\x89\xec" \
        b"\x30\xb7\x0b\xe8\x31\x09\x48\xef\x30\xc6\x4c\xe6\x30\xb7\x0b\xe8" \
        b"\x30\x89\x48\xee\x30\x98\x89\xec\x30\x55\x8d\xe4\x30\x74\x0f\xdf" \
        b"\x30\xb7\x0b\xe8\x30\x74\x0f\xdf\x30\xc6\x4c\xe6\x30\xc6\x4c\xe6" \
        b"\x30\xf4\x0f\xe0\x30\x74\x0f\xdf\x30\x37\x0b\xe8\x30\x89\x48\xee" \
        b"\x30\x89\x48\xee\x30\x55\x8d\xe3\x30\x18\x89\xec\x2f\x74\x0f\xdf" \
        b"\x30\xa7\xca\xea\x30\xe4\xce\xe2\x30\xa7\xca\xea\x30\xc6\x4c\xe6" \
        b"\x30\xd5\x8d\xe4\x30\x18\x89\xeb\x30\xe4\xce\xe2\x30\xb7\x0b\xe8" \
        b"\x30\xd5\x8d\xe4\x30\x89\x48\xee\x30\xa7\xca\xea\x30\x89\x48\xee" \
        b"\x30\xf4\x0f\xe1\x30\xe4\xce\xe3\x30\xd5\x8d\xe5\x30\xc6\x4c\xe5" \
        b"\x30\x18\x89\xeb\x30\xa7\xca\xea\x30\xc6\x4c\xe5\x30\x89\x48\xee" \
        b"\x30\xb7\x0b\xe8\x30\x74\x0f\xdf\x30\x74\x0f\xdf\x2f\xf4\x0f\xdf" \
        b"\x30\xd5\x8d\xe4\x30\xe4\xce\xe2\x30\xa7\xca\xe9\x30\x98\x89\xec" \
        b"\x31\x01\xa8\x6f\x30\x74\x0f\xe0\x30\xb7\x0b\xe8\x30\x98\x89\xec" \
        b"\x30\x89\x48\xef\x30\xe4\xce\xe1\x30\x98\x89\xec\x30\x98\x89\xec" \
        b"\x30\x37\x0b\xe8\x30\x37\x0b\xe8\x30\x89\x48\xee\x30\xb7\x0b\xe8" \
        b"\x30\xe4\xce\xe3\x30\x98\x89\xec\x31\x10\xe9\x6e\x30\xc6\x4c\xe6" \
        b"\x30\xa7\xca\xea\x30\xb7\x0b\xe7\x30\xc6\x4c\xe6\x30\x98\x89\xec" \
        b"\x30\xb7\x0b\xe8\x30\x37\x0b\xe7\x00\xc0\x00\x00\x00\x2d\x4b\x43" \
        b"\x79\x1c\x1c\x88\x06\xbe\x8a\x70\x00\x00\x00\x00\x20\x12\x00\x12" \
        b"\x00\x01\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10" \
        b"\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\x10\x00\xc0\x00\x00" \
        b"\x00\x2d\x4b\x43\x79\x1c\x43\x98\x06\xbe\x91\x70\x00\x00\x00\x00" \
        b"\x00\x11\x00\x00\x00\xc0\x00\x00\x00\x2d\x4b\x43\x79\x1c\x4b\x68"

    msg = parse_message(data)

    assert msg.header.id == 0x1d
    assert msg.header.object_ref == 0x06_dd_b9_58
    assert isinstance(msg, DataStream1Message)
    assert len(msg.elements) == 3
    element = msg.elements[0]
    assert element.item_handle == 113150320
    assert isinstance(element.value, list)
    assert len(element.value) == 128
    assert element.value[0] == 0.0
    assert element.quality == 192
    assert element.timestamp == datetime.datetime(
        2005, 1, 2, 8, 11, 58, 757000)
    element = msg.elements[-1]
    assert element.item_handle == 113152368
    assert isinstance(element.value, int)
    assert element.value == 0
    assert element.quality == 192
    assert element.timestamp == datetime.datetime(
        2005, 1, 2, 8, 11, 58, 768999)


if __name__ == "__main__":
    exit(pytest.main(['-v', __file__]))
